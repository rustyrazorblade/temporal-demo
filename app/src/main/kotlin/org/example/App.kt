/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import io.temporal.client.WorkflowClient
import io.temporal.client.WorkflowClientOptions
import io.temporal.client.WorkflowOptions
import io.temporal.client.WorkflowStub

import io.temporal.serviceclient.WorkflowServiceStubs
import io.temporal.worker.WorkerFactory
import org.jline.reader.LineReaderBuilder
import org.jline.terminal.Terminal
import org.jline.terminal.TerminalBuilder
import java.util.concurrent.TimeUnit

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun main(args: Array<String>) {

    val service = WorkflowServiceStubs.newLocalServiceStubs()

    val clientOptions = WorkflowClientOptions.newBuilder()
        .setNamespace("default")
        .build()

    val client = WorkflowClient.newInstance(service, clientOptions)

    val workflowOptions = WorkflowOptions.newBuilder()
        .setTaskQueue(Shared.DEMO_TASK_QUEUE)
        .setWorkflowId("monkey2").build()


    val line = args.getOrElse(0) {
        "DEFAULT"
    }

    println("Starting with $line")

    // create a workflow

    val workflow = client.newWorkflowStub(TestWorkflow::class.java, workflowOptions)

    val data = WorkflowDataImpl(line)

    val instance = WorkflowClient.start(workflow::starCoolWorkflow, data)
    println("instance: ${instance.workflowId}")

    val untyped = WorkflowStub.fromTyped(workflow)

    for(i in 0..10) {
        try {
            val result = untyped.getResult(1, TimeUnit.SECONDS, Int::class.java)
            println("RESULT? $result")
            break
        } catch (e: Exception) {
            println("OH NO MY SILLY GOOSE $e")
        }
    }
    println("Done")


    // the workflow is going to create a bunch of activities, and it will take at least a minute to run
    // so we're going to create it then monitor it
}
